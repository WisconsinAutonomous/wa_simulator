:mod:`wa_simulator.visualization`
=================================

.. py:module:: wa_simulator.visualization

.. autoapi-nested-parse::

   Wisconsin Autonomous - https://www.wisconsinautonomous.org

   Copyright (c) 2021 wisconsinautonomous.org
   All rights reserved.

   Use of this source code is governed by a BSD-style license that can be found
   in the LICENSE file at the top level of the repo



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   wa_simulator.visualization.WAVisualization
   wa_simulator.visualization.WAMultipleVisualizations
   wa_simulator.visualization.WAMatplotlibVisualization



.. py:class:: WAVisualization

   Bases: :class:`abc.ABC`

   Base class to be used for visualization of the simulation world.

   Derived classes will use various world attributes to visualize the simulation

   .. method:: synchronize(self, time, vehicle_inputs)
      :abstractmethod:

      Synchronize the visualization at the specified time with the passed vehicle inputs

      :param time: time to synchronize the visualization to
      :type time: double
      :param vehicle_inputs: inputs to the vehicle. Can be helpful for visualization (debug) purposes.
      :type vehicle_inputs: WAVehicleInputs


   .. method:: advance(self, step)
      :abstractmethod:

      Advance the state of the visualization by the specified step

      :param step: step size to update the visualization by
      :type step: double


   .. method:: is_ok(self)
      :abstractmethod:

      Verifies the visualization is running properly.

      :returns: Whether the visualization is running correctly.
      :rtype: bool



.. py:class:: WAMultipleVisualizations(visualizations)

   Bases: :class:`wa_simulator.visualization.WAVisualization`

   Wrapper class for multiple visualizations. Allows multiple visualizations to be used.

   :param visualizations: List of visualizations.
   :type visualizations: list

   .. method:: synchronize(self, time, vehicle_inputs)

      Synchronize each visualization at the specified time

      :param time: the time at which the visualization should synchronize all modules
      :type time: double
      :param vehicle_inputs: vehicle inputs
      :type vehicle_inputs: WAVehicleInputs


   .. method:: advance(self, step)

      Advance the state of each managed visualization

      :param step: the time step at which the visualization should be advanced
      :type step: double


   .. method:: is_ok(self)

      Verifies the visualization is running properly.

      :returns: Whether the visualization is running correctly.
      :rtype: bool



.. py:class:: WAMatplotlibVisualization(vehicle, system, plotter_type='single', **kwargs)

   Bases: :class:`wa_simulator.visualization.WAVisualization`

   Matplotlib visualizer of the simulator world and the vehicle

   :param vehicle: vehicle to render in the matplotlib plot window
   :type vehicle: WAVehicle
   :param system: system used to grab certain parameters of the simulation
   :type system: WASystem
   :param plotter_type: Type of plotter. "single" for single threaded, "multi" for multi threaded (fastest), "jupyter" if jupyter is used. Defaults to "single".
   :type plotter_type: str, optional

   .. attribute:: render_steps

      steps between which the visualization should update

      :type: int

   .. attribute:: vehicle

      vehicle to render in the matplotlib plot window

      :type: WAVehicle

   .. attribute:: system

      system used to grab certain parameters of the simulation

      :type: WASystem

   .. attribute:: mat_vehicle

      a wrapper class used to create a visual representation of the vehicle in matplotlib

      :type: _MatplotlibVehicle

   .. attribute:: dashboard

      a wrapper class used to create a visual dashboard on the matplotlib window

      :type: _MatplotlibSimpleDashboard

   .. attribute:: plotter

      a wrapper class that handles matplotlib visualization and possible single/multi threading

      :type: _MatplotlibPlotter

   :raises ValueError: plotter_type isn't recognized

   .. method:: synchronize(self, time, vehicle_inputs)

      Synchronize the vehicle inputs to the values in this visualization

      Will just set class members

      :param time: time at which to update the vehicle to
      :type time: double
      :param vehicle_inputs: vehicle inputs
      :type vehicle_inputs: WAVehicleInputs


   .. method:: advance(self, step)

      Advance the state of the visualization by the specified step

      Will only call update if the scene should be rendered given the render step

      :param step: step size to update the visualization by
      :type step: double


   .. method:: is_ok(self)

      Checks if the rendering process is still alive

      :returns: whether the simulation is still alive
      :rtype: bool


   .. method:: register_key_press_event(self, callback)

      Register a key press callback with the matplotlib visualization

      :param callback: the callback to invoke when a key is pressed
      :type callback: function


   .. method:: plot(self, *args, **kwargs)

      Pass plot info to the underyling plotter



