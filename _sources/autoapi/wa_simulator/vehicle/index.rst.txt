:mod:`wa_simulator.vehicle`
===========================

.. py:module:: wa_simulator.vehicle

.. autoapi-nested-parse::

   Wisconsin Autonomous - https://www.wisconsinautonomous.org

   Copyright (c) 2021 wisconsinautonomous.org
   All rights reserved.

   Use of this source code is governed by a BSD-style license that can be found
   in the LICENSE file at the top level of the repo



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   wa_simulator.vehicle.WAVehicle
   wa_simulator.vehicle.WALinearKinematicBicycle



Functions
~~~~~~~~~

.. autoapisummary::

   wa_simulator.vehicle.load_properties_from_json


.. function:: load_properties_from_json(filename, prop)

   Load a specified property from a json specification file

   Will load a json file and extract the passed property field for use
   by the underyling vehicle object

   :param filename: the filename location within the set WA data folder for the json file
   :type filename: str
   :param property: the property to get. Ex: "Vehicle Properties"
   :type property: str

   :raises ValueError: The property field isn't found

   :returns: the property field extracted from the json file
   :rtype: dict


.. py:class:: WAVehicle(filename=None)

   Bases: :class:`abc.ABC`

   Base class for a WAVehicle.

   To implement a new vehicle model, override this class. A WAVehicle should interact
   with the terrain/assets/world and take three inputs: steering, throttle, braking.

   :param filename: Filename to be used for visualization properties
   :type filename: str, optional

   .. attribute:: vis_properties

      Visual properties used for visualization of the vehicle.

      :type: dict

   .. method:: synchronize(self, time, vehicle_inputs)
      :abstractmethod:

      Synchronize the vehicle at the specified time and driver inputs

      :param time: the time at which the synchronize the vehicle to
      :type time: double
      :param vehicle_inputs: Inputs for the underyling dynamics
      :type vehicle_inputs: WAVehicleInputs


   .. method:: advance(self, step)
      :abstractmethod:

      Advance the vehicle by the specified step

      :param step: how much to advance the vehicle by
      :type step: double


   .. method:: get_simple_state(self)
      :abstractmethod:

      Get a simple state representation of the vehicle.

      Must return a tuple with the following values:
          (x position, y position, yaw about the Z, speed)



.. py:class:: WALinearKinematicBicycle(filename, x=0, y=0, yaw=0, v=0)

   Bases: :class:`wa_simulator.vehicle.WAVehicle`

   A linear, kinematic bicycle model

   :param filename: json specification file used to describe the parameters for the vehicle
   :type filename: str
   :param x: x position of the vehicle. Defaults to 0.
   :type x: double, optional
   :param y: y position of the vehicle. Defaults to 0.
   :type y: double, optional
   :param yaw: angle about the Z. Defaults to 0.
   :type yaw: double, optional
   :param v: speed of the vehicle. Defaults to 0.
   :type v: double, optional

   .. attribute:: x

      x position of the vehicle

      :type: double

   .. attribute:: y

      y position of the vehicle

      :type: double

   .. attribute:: yaw

      angle about the Z

      :type: double

   .. attribute:: v

      speed of the vehicle

      :type: double

   .. attribute:: omega

      wheel angular velocity

      :type: double

   .. attribute:: omega_dot

      wheel angular acceleration

      :type: double

   .. attribute:: mass

      vehicle mass

      :type: double

   .. attribute:: a

      2nd order torque coefficients

      :type: list

   .. attribute:: GR

      gear ratio

      :type: double

   .. attribute:: r_eff

      Effective radius at which the vehicle can turn

      :type: double

   .. attribute:: J_e

      Inertia of the vehicle

      :type: double

   .. attribute:: c_a

      Aerodynamic coefficient

      :type: double

   .. attribute:: c_rl

      Friction coefficient

      :type: double

   .. attribute:: c

      Tire force

      :type: double

   .. attribute:: F_max

      Max force imposed at the wheel

      :type: double

   .. attribute:: L

      Vehicle wheelbase (distance between front and back axles)

      :type: double

   .. attribute:: min_steering

      Minimum steering value allowed

      :type: double

   .. attribute:: max_steering

      Maximum steering value allowed

      :type: double

   .. attribute:: min_throttle

      Minimum throttle value allowed

      :type: double

   .. attribute:: max_throttle

      Maximum throttle value allowed

      :type: double

   .. attribute:: min_braking

      Minimum braking value allowed

      :type: double

   .. attribute:: max_braking

      Maximum braking value allowed

      :type: double

   .. attribute:: GO_KART_MODEL_FILE
      :annotation: = vehicles/GoKart/GoKart_KinematicBicycle.json

      

   .. attribute:: IAC_VEH_MODEL_FILE
      :annotation: = vehicles/IAC/IAC_KinematicBicycle.json

      

   .. method:: initialize(self, vp)


   .. method:: synchronize(self, time, vehicle_inputs)

      Synchronize the vehicle inputs to the values in this model

      :param time: time at which to update the vehicle to
      :type time: double
      :param vehicle_inputs: vehicle inputs
      :type vehicle_inputs: WAVehicleInputs


   .. method:: advance(self, step)

      Perform a dynamics update

      :param step: time step to update the vehicle by
      :type step: double


   .. method:: get_simple_state(self)

      Get a simple state representation of the vehicle.

      :returns: (x position, y position, yaw about the Z, speed)
      :rtype: tuple



