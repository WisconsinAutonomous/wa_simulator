:mod:`wa_simulator.system`
==========================

.. py:module:: wa_simulator.system

.. Module Contents
.. ---------------


.. raw:: html

   <h2>Classes</h2>

.. autoapisummary::
  :nosignatures:

  wa_simulator.system.WASystem

.. py:class:: WASystem(step_size: float = 0.05, render_step_size: float = 0.02, end_time: float = 120, args: argparse.Namespace = None)

   Used to manage simulation parameters and can be used to update simulation dynamics

   A system is used for organizational purposes almost exclusively. It is passed to other
   module classes to handle passing various attributes. Could be responsible for updating
   module dynamics depending on the underlying models.

   To instantiate a WASystem, you can either pass in various parameters directly, i.e. ``WASystem(step_size, render_step_size, ...)``
   or pass a ``argparse.Namespace`` in directly. This object is what is returned from :meth:`~WAArgumentParser.parse_args`.

   .. highlight:: python
   .. code:: python

       # Usage
       from wa_simulator import WAArgumentParser, WASystem

       # Passing values directly to the system
       system = WASystem(step_size=1e-3, render_step_size=2e-3, end_time=20)

       # Or using WAArgumentParser
       parser = WAArgumentParser(use_sim_defaults=True)
       args = parser.parse_args()

       system = WASystem(args=args)

   :Parameters: * **step_size** (*float, optional*) -- the step size for the simulation. Defaults to 5e-2.
                * **render_step_size** (*float, optional*) -- Render step size. Defaults to 2e-2.
                * **end_time** (*float, optional*) -- the end time for the simulation. Defaults to 120 seconds.
                * **args** (*argparse.Namespace, optional*) -- the output namespace from argparse (see explanation above)

   :ivar step_number: Counter of the Advance function
   :vartype step_number: int
   :ivar step_size: the step size for the simulation
   :vartype step_size: float
   :ivar render_step_size: the render step size
   :vartype render_step_size: float
   :ivar end_time: the end time for the simulation
   :vartype end_time: float
   :ivar time: stores the time from the simulation

   :vartype time: float

   .. method:: advance(self)

      Advance the system

      Will update the time and increment the step number


   .. method:: is_ok(self) -> bool

      Check whether the system is still running correctly.

      Simply verifies the end time for the simulation hasn't been reached







.. .. .. autoapi-nested-parse::
..
..    Wisconsin Autonomous - https://wa.wisc.edu

   Copyright (c) 2021 wa.wisc.edu
   All rights reserved.

   Use of this source code is governed by a BSD-style license that can be found
   in the LICENSE file at the top level of the repo

..
.. 