:mod:`wa_simulator.path`
========================

.. py:module:: wa_simulator.path

.. autoapi-nested-parse::

   Wisconsin Autonomous - https://www.wisconsinautonomous.org

   Copyright (c) 2021 wisconsinautonomous.org
   All rights reserved.

   Use of this source code is governed by a BSD-style license that can be found
   in the LICENSE file at the top level of the repo



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   wa_simulator.path.WAPath
   wa_simulator.path.WASplinePath



Functions
~~~~~~~~~

.. autoapisummary::

   wa_simulator.path.load_waypoints_from_csv
   wa_simulator.path.calc_path_length_cummulative
   wa_simulator.path.calc_path_curvature


.. function:: load_waypoints_from_csv(filename, **kwargs)

   Get data points from a csv file.

       Should be structured as "x,y,z
   x,y,z...". See NumPy.loadtxt for more info on arguments.

       Args:
           filename (str): file to open and read data from

       Returns:
           np.ndarray: a nxm array with each data point in each row


.. function:: calc_path_length_cummulative(x, y)

   Get the cummulative distance along a path provided the given x and y position values

   :param x: x coordinates
   :type x: np.ndarray
   :param y: y coordinates
   :type y: np.ndarray

   :returns: the cummulative distance along the path
   :rtype: np.ndarray


.. function:: calc_path_curvature(dx, dy, ddx, ddy)

   Calculate the curvature of a path at each point

   :param dx: first x derivative
   :type dx: np.ndarray
   :param dy: first y derivative
   :type dy: np.ndarray
   :param ddx: second x derivative
   :type ddx: np.ndarray
   :param ddy: second y derivative
   :type ddy: np.ndarray

   :returns: the curvature at each point
   :rtype: np.ndarray


.. py:class:: WAPath(waypoints=None, parameters=WAPathParameters())

   Base Path object. To be used to generate paths or trajectories for path planning and/or path following

   .. attribute:: parameters

      The parameters used to interpolate along the path

      :type: WAPath.WAPathParameters

   .. attribute:: waypoints

      The waypoints that the path interpolates about or maintains

      :type: np.ndarray

   .. attribute:: points

      The interpolated points (can be the waypoints)

      :type: np.ndarray

   .. py:class:: WAPathParameters

      Holds the parameters for the interpolated path

      .. attribute:: is_closed

         Whether the path is a closed loop. Defaults to True.

         :type: bool

      .. attribute:: is_closed
         :annotation: = True

         


   .. method:: calc_closest_point(self, pos)
      :abstractmethod:

      Calculate the closest point on the path from the passed position

      :param pos: the position to find the closest point on the path to
      :type pos: wa.WAVector

      :returns: the closest point on the path
      :rtype: wa.WAVector


   .. method:: plot(self, *args, show=True, **kwargs)
      :abstractmethod:

      Plot the path

      :param show: show the plot window. Defaults to True.
      :type show: bool, optional



.. py:class:: WASplinePath(waypoints, parameters=None, **kwargs)

   Bases: :class:`wa_simulator.path.WAPath`

   Spline path implemented with SciPy's splprep and splev methods

   :param waypoints: the waypoints to fit the spline to
   :type waypoints: np.ndarray
   :param num_points: number of points to interpolate. Defaults to 100.
   :type num_points: int, optional
   :param smoothness: how fit to each point the spline should be. will hit all points by default. Defaults to 0.0.
   :type smoothness: float, optional
   :param is_closed: Is the path a closed loop. Defaults to True.
   :type is_closed: bool, optional

   :raises TypeError: the waypoints array type is not as expected

   .. py:class:: WASplinePathParameters

      Bases: :class:`wa_simulator.path.WAPath`

      The parameters for a WASplinePath

      .. attribute:: num_points

         number of points to interpolate along the path. Defaults to 100.

         :type: int

      .. attribute:: smoothness

         How close the path is to the waypoints. Defaults to 0.0 (goes through all the points).

         :type: float

      .. attribute:: num_points
         :annotation: = 100

         

      .. attribute:: smoothness
         :annotation: = 0.0

         


   .. method:: calc_closest_point(self, pos)

      Calculate the closest point on the path from the passed position

      :param pos: the position to find the closest point on the path to
      :type pos: wa.WAVector

      :returns: the closest point on the path
                idx: the index of the point on the path
      :rtype: wa.WAVector


   .. method:: plot(self, *args, show=True, **kwargs)

      Plot the path

      :param show: show the plot window. Defaults to True.
      :type show: bool, optional


   .. method:: calc_length_cummulative(self)

      Get the cummulative distance along the path

      :returns: Cummulative distance along the path
      :rtype: np.ndarray


   .. method:: calc_curvature(self)

      Get the curvature at each point on the path

      :returns: Curvature at each point on the path
      :rtype: np.ndarray



