:mod:`wa_simulator.path`
========================

.. py:module:: wa_simulator.path

.. Module Contents
.. ---------------


.. raw:: html

   <h2>Classes</h2>

.. autoapisummary::
  :nosignatures:

  wa_simulator.path.WAPath
  wa_simulator.path.WASplinePath

.. py:class:: WAPath(waypoints, **kwargs)

   Base Path object. To be used to generate paths or trajectories for path planning and / or path following

   All path objects * should * be implemented in a 3D coordinate space! This means, waypoints should be a list or np.ndarray of
   lists or np.ndarrays of size 3!

   Example:

   .. highlight:: python
   .. code-block:: python

       from wa_simulator.path import WAPath, load_waypoints_from_csv

       # Simple 2D Path
       waypoints = [
           [1, 2, 0],
           [2, 2, 0],
           [5, 5, 0],
       ]
       # Not actually allowed since WAPath is abstract (has abstract methods)
       path_2D = WAPath(waypoints)

       # Simple 3D Path
       waypoints = [
           [1, 2, 1],
           [2, 2, 2],
           [5, 5, 1],
       ]
       # Not actually allowed since WAPath is abstract (has abstract methods)
       path_3D = WAPath(waypoints)

       # JSON loaded path
       waypoints = load_waypoints_from_csv("path.csv")
       # Not actually allowed since WAPath is abstract (has abstract methods)
       path_json = WAPath(waypoints)

   :Parameters: * **waypoints** (*np.ndarray*) -- The waypoints that the path interpolates about or maintains
                * **\*\*kwargs** -- Additional keyworded arguments.

   :raises TypeError: the waypoints array type is not as expected

   .. method:: get_points(self, der=0) -> np.ndarray

      Get the points for this path

      :Parameters: **der** (*int*) -- derivative to grab. Defaults to 0 (just the points).

      :returns: *np.ndarray* -- The points array

      :raises ValueError: If der is not a supported value


   .. method:: get_waypoints(self) -> np.ndarray

      Get the waypoints for this path

      :returns: *np.ndarray* -- The waypoints array


   .. method:: is_closed(self) -> bool

      Get whether the path is closed

      :returns: *bool* -- Is the path closed?


   .. method:: get_parameters(self) -> dict

      Get the parameters passed in to the this function.

      Track objects essentially copy other paths, so we want to keep the parameters for later

      :returns: *dict* -- The saved parameteres


   .. method:: set_vis_properties(self, vis_properties: dict)

      Set the visual properties for this path.

      The visual properties are used in :meth:`~plot`.

      :Parameters: **vis_properties** (*dict*) -- The visual properties to apply to this path.

      :raises TypeError: If ``vis_properties`` is not a ``dict``


   .. method:: get_vis_properties(self) -> dict

      Get the visual properties.

      Python will return a reference since it is not a primitive type. This means that if you change any values
      in the returned properties dictionary, it will also change the instance held by this class. This can be an
      alternative method to the :meth:`~set_vis_properties`.

      :returns: *dict* -- The visual properties


   .. method:: calc_closest_point(self, pos: WAVector, return_idx: bool = False) -> WAVector
      :abstractmethod:

      Calculate the closest point on the path from the passed position

      :Parameters: * **pos** (*WAVector*) -- the position to find the closest point on the path to
                   * **return_idx** (*bool, optional*) -- return the index of the point with respect to the self._points array

      :returns: *WAVector* -- the closest point on the path
                int(optional): the index of the point on the path


   .. method:: plot(self, *args, show: bool = True, **kwargs)
      :abstractmethod:

      Plot the path

      :Parameters: * **\*args** -- Positional arguments that are passed directly to the plotter
                   * **show** (*bool, optional*) -- show the plot window. Defaults to True.
                   * **\*\*kwargs** -- Keyworded arguments passed to the plotter



.. py:class:: WASplinePath(waypoints, **kwargs)

   Bases: :class:`wa_simulator.path.WAPath`

   Spline path implemented with SciPy's splprep and splev methods

   :Parameters: * **waypoints** (*np.ndarray*) -- the waypoints to fit the spline to
                * **num_points** (*int, optional*) -- number of points to interpolate. Defaults to 100.
                * **smoothness** (*float, optional*) -- how fit to each point the spline should be. will hit all points by default. Defaults to 0.0.
                * **is_closed** (*bool, optional*) -- Is the path a closed loop. Defaults to False.

   :raises TypeError: the waypoints array type is not as expected

   .. method:: calc_closest_point(self, pos: WAVector, return_idx: bool = False) -> (WAVector, int)

      Calculate the closest point on the path from the passed position

      :Parameters: * **pos** (*WAVector*) -- the position to find the closest point on the path to
                   * **return_idx** (*bool, optional*) -- return the index of the point with respect to the self._points array

      :returns: *WAVector* -- the closest point on the path
                int(optional): the index of the point on the path


   .. method:: plot(self, *args, show=True, ignore_vis_properties=False, **kwargs)

      Plot the path in matplotlib.

      :Parameters: * **args** -- Positional arguments passed directly to matplotlib
                   * **show** (*bool, optional*) -- show the plot window. Defaults to True.
                   * **ignore_vis_properties** (*bool, optional*) -- If True, ignore the visual properties set through :meth:`~set_vis_properties`. If False, dict passed to :meth:`~set_vis_properties` will be passed as keyworded argements to matplotlib.
                   * **kwargs** -- Keyworded arguments passed directly to matplotlib.


   .. method:: calc_length_cummulative(self) -> np.ndarray

      Get the cummulative distance along the path

      :returns: *np.ndarray* -- Cummulative distance along the path


   .. method:: calc_curvature(self) -> np.ndarray

      Get the curvature at each point on the path

      :returns: *np.ndarray* -- Curvature at each point on the path






.. raw:: html

   <h2>Methods</h2>

.. autoapisummary::
  :nosignatures:

   wa_simulator.path.create_path_from_json
   wa_simulator.path.load_waypoints_from_csv
   wa_simulator.path.calc_path_length_cummulative
   wa_simulator.path.calc_path_curvature

.. function:: create_path_from_json(filename: str) -> 'WAPath'

   Creates a WAPath object from json

   json file options:

   * Waypoints Input File (str, required): A csv file describing the path waypoints. Loaded using :meth:`~load_waypoints_from_csv`.

   * Additional keyworded arguments necessary for the path template

   :Parameters: **filename** (*str*) -- The json specification that describes the path


.. function:: load_waypoints_from_csv(filename: str, **kwargs) -> np.ndarray

   Get data points from a csv file.

   Should be structured as "x,y,z\\nx,y,z...". See `NumPy.loadtxt < https: // numpy.org/doc/stable/reference/generated/numpy.loadtxt.html >`_
   for more info on arguments.

   :Parameters: **filename** (*str*) -- file to open and read data from

   :returns: *np.ndarray* -- an n x m array with each data point in each row


.. function:: calc_path_length_cummulative(x, y) -> np.ndarray

   Get the cummulative distance along a path provided the given x and y position values

   :Parameters: * **x** (*np.ndarray*) -- x coordinates
                * **y** (*np.ndarray*) -- y coordinates

   :returns: *np.ndarray* -- the cummulative distance along the path


.. function:: calc_path_curvature(dx, dy, ddx, ddy) -> np.ndarray

   Calculate the curvature of a path at each point

   :Parameters: * **dx** (*np.ndarray*) -- first x derivative
                * **dy** (*np.ndarray*) -- first y derivative
                * **ddx** (*np.ndarray*) -- second x derivative
                * **ddy** (*np.ndarray*) -- second y derivative

   :returns: *np.ndarray* -- the curvature at each point





.. .. .. autoapi-nested-parse::
..
..    Wisconsin Autonomous - https://www.wisconsinautonomous.org

   Copyright (c) 2021 wisconsinautonomous.org
   All rights reserved.

   Use of this source code is governed by a BSD-style license that can be found
   in the LICENSE file at the top level of the repo

..
.. 