:mod:`wa_simulator.utils`
=========================

.. py:module:: wa_simulator.utils

.. autoapi-nested-parse::

   Wisconsin Autonomous - https://www.wisconsinautonomous.org

   Copyright (c) 2021 wisconsinautonomous.org
   All rights reserved.

   Use of this source code is governed by a BSD-style license that can be found
   in the LICENSE file at the top level of the repo



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   wa_simulator.utils.get_wa_data_file
   wa_simulator.utils.set_wa_data_directory
   wa_simulator.utils.check_type
   wa_simulator.utils.load_json
   wa_simulator.utils.check_field
   wa_simulator.utils.check_field_allowed_values


.. data:: DATA_DIRECTORY
   

   

.. function:: get_wa_data_file(filename)

   Get the absolute path to the file passed

   :param filename: file relative to the data folder to get the absolute path for
   :type filename: str

   :returns: the absolute path of the file
   :rtype: str


.. function:: set_wa_data_directory(path)

   Set the data path

   :param path: relative (or absolute) path where the data is stored
   :type path: str


.. function:: check_type(obj, correct_type, variable_name, function_name)

   Check the type of an object to verify it is the correct type

   :param obj: The original object to check the type of
   :type obj: Any
   :param correct_type: The type obj should be
   :type correct_type: Any
   :param variable_name: The name of the original variable for printing
   :type variable_name: str
   :param function_name: The name of the calling function
   :type function_name: str


.. function:: load_json(filename: str)

   Load a json file

   :param filename: The file to load
   :type filename: str


.. function:: check_field(j: dict, field: str, value=None, field_type=None, allowed_values: list = None, optional: bool = False)

   Check a field in a dict loaded from json

   :param j: The dictionary loaded via a json file
   :type j: dict
   :param field: The field to check
   :type field: str
   :param value: Some value field must be
   :type value: Any, optional
   :param field_type: The type the field must be
   :type field_type: Type, optional
   :param allowed_values: The allowed values
   :param optional: Whether the field is optional
   :type optional: bool, optional


.. function:: check_field_allowed_values(j: dict, field: str, allowed_values: list)

   Check a field in a dict loaded from json and check that all elements are allowed

   :param j: The dictionary loaded via a json file
   :type j: dict
   :param field: The field to check
   :type field: str
   :param allowed_values: The allowed values


