:mod:`wa_simulator.vector`
==========================

.. py:module:: wa_simulator.vector

.. autoapi-nested-parse::

   Wisconsin Autonomous - https://www.wisconsinautonomous.org

   Copyright (c) 2021 wisconsinautonomous.org
   All rights reserved.

   Use of this source code is governed by a BSD-style license that can be found
   in the LICENSE file at the top level of the repo



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   wa_simulator.vector.WAVector



.. py:class:: WAVector(shape, dtype=float, buffer=None, offset=0, strides=None, order=None)

   Bases: :class:`numpy.ndarray`

   Wrapper of a numpy array to allow for x,y,z properties

   Usage:
       > p1 = WAVector([1, 2])
       > p2 = WAVector([4, 5])
       > p1 + p2
       WAVector([5, 7])

   .. method:: __eq__(self, other)

      Check if two vectors are equal

      :param other: the vector to cross check with
      :type other: wa.WAVector

      :returns: whether the values of the vectors are equal
      :rtype: bool


   .. method:: __ne__(self, other)

      Check if two vectors are not equal

      :param other: the vector to cross check with
      :type other: wa.WAVector

      :returns: whethe values of the vectors are not equal
      :rtype: bool


   .. method:: __iter__(self)

      Iterate over the x,y,z properties

      :Yields: *float* -- the x, y or z value


   .. method:: __sub__(self, other)

      Substract a vector from this vector

      :param other: the other vector to substract from this vector
      :type other: wa.WAVector

      :returns: the result
      :rtype: wa.WAVector


   .. method:: x(self)
      :property:

      Get first element

      :raises Exception: exit if undefined

      :returns: the 1st element
      :rtype: any


   .. method:: y(self)
      :property:

      Get the second element

      :raises Exception: Exits if undefined

      :returns: the second element
      :rtype: any


   .. method:: z(self)
      :property:

      Get the third element

      :raises Exception: Exits if undefined

      :returns: the third element
      :rtype: any


   .. method:: length(self)

      Get the euclidean length of this vector

      :returns: the euclidean length
      :rtype: float



