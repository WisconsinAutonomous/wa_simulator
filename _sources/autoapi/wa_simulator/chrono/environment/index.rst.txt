:mod:`wa_simulator.chrono.environment`
======================================

.. py:module:: wa_simulator.chrono.environment

.. Module Contents
.. ---------------


.. raw:: html

   <h2>Classes</h2>

.. autoapisummary::
  :nosignatures:

  wa_simulator.chrono.environment.WAChronoEnvironment

.. py:class:: WAChronoEnvironment(system: WAChronoSystem, filename: str)

   Bases: :class:`wa_simulator.environment.WAEnvironment`

   The environment wrapper that's responsible for holding Chrono assets and the terrain

   TODO: Add assets from file

   :Parameters: * **system** (*WASystem*) -- the wa system that wraps a ChSystem
                * **filename** (*str*) -- the json specification file describing the environment

   .. method:: synchronize(self, time)

      Update the state of this component at the current time.

      The primary reason to decouple the update method into two separate calls (i.e. :meth:`~synchronize` and :meth:`~advance`)
      is to provide flexibility to the user and is essentially semantic. In most simple cases, a user will only need one of the two.
      Furthermore, can only use :meth:`~advance` if they prefer and just update their own :code:`time` variable. Given the unknown use cases
      for the simulator at the time of writing, it was chosen to provide two different methods with similar functionality as to allow
      the user to choose their desired implementation, rather than the writers of this package.

      As opposed to :meth:`~advance`, this method gets the current time of the simulation. As menthioned earlier,
      :meth:`~advance` and a user defined `time` variable could be used to instead to hold the current state of the simulation. However,
      to aid in generality of the package, this method is provided to simply provide the current time of the simulation to the user in a decoupled
      manner from the :meth:`~advance` method.

      :Parameters: **time** (*float*) -- The current time to synchronize to


   .. method:: advance(self, step)

      Advance the state of this component by the specified time step.

      The primary reason to decouple the update method into two separate calls (i.e. :meth:`~synchronize` and :meth:`~advance`)
      is to provide flexibility to the user and is essentially semantic. In most simple cases, a user will only need one of the two.
      Furthermore, can only use :meth:`~advance` if they prefer and just update their own :code:`time` variable. Given the unknown use cases
      for the simulator at the time of writing, it was chosen to provide two different methods with similar functionality as to allow
      the user to choose their desired implementation, rather than the writers of this package.

      :Parameters: **step** (*float*) -- The step size to advance this component by


   .. method:: add_asset(self, asset: Any)

      Add an asset to the world

      A asset holds certain attributes that may be applicable in various simulations. This method
      stores created assets in the environment object.

      :Parameters: **asset** (*Any*) -- The asset to add.






.. raw:: html

   <h2>Methods</h2>

.. autoapisummary::
  :nosignatures:

   wa_simulator.chrono.environment.load_chrono_terrain_from_json

.. function:: load_chrono_terrain_from_json(system: WAChronoSystem, filename: str)

   Load a ChTerrain from a json specification file

   :Parameters: * **filename** (*str*) -- the relative path to a terrain json file
                * **system** (*WAChronoSystem*) -- the chrono system used to handle the terrain

   :returns: *ChTerrain* -- The loaded terrain





.. .. .. autoapi-nested-parse::
..
..    Wisconsin Autonomous - https://wa.wisc.edu

   Copyright (c) 2021 wa.wisc.edu
   All rights reserved.

   Use of this source code is governed by a BSD-style license that can be found
   in the LICENSE file at the top level of the repo

..
.. 